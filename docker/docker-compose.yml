version: '3.8'

services:
  datascrapexter:
    build:
      context: .
      dockerfile: Dockerfile
    image: datascrapexter:latest
    container_name: datascrapexter
    restart: unless-stopped
    volumes:
      - ./configs:/app/configs
      - ./outputs:/app/outputs
      - ./logs:/app/logs
      - ./data:/app/data
      - ./scripts:/app/scripts
    environment:
      - TZ=UTC
      - LOG_LEVEL=info
      - SCRAPER_USER_AGENT=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36
      - SCRAPER_TIMEOUT=30
      - SCRAPER_RETRY_ATTEMPTS=3
      - SCRAPER_RETRY_DELAY=5
    networks:
      - datascrapexter-network
    command: ["datascrapexter", "server", "--port", "8080"]
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Selenium Grid Hub (optional - for distributed scraping)
  selenium-hub:
    image: selenium/hub:4.16.1
    container_name: selenium-hub
    restart: unless-stopped
    ports:
      - "4444:4444"
    environment:
      - GRID_MAX_SESSION=20
      - GRID_BROWSER_TIMEOUT=300
      - GRID_TIMEOUT=300
    networks:
      - datascrapexter-network
    profiles:
      - selenium

  # Chrome Node for Selenium Grid
  chrome-node:
    image: selenium/node-chrome:4.16.1
    container_name: chrome-node
    restart: unless-stopped
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_MAX_SESSIONS=5
      - SE_NODE_SESSION_TIMEOUT=300
    networks:
      - datascrapexter-network
    profiles:
      - selenium
    deploy:
      replicas: 3

  # Redis for caching and job queue (optional)
  redis:
    image: redis:7-alpine
    container_name: datascrapexter-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - datascrapexter-network
    profiles:
      - cache
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for data storage (optional)
  postgres:
    image: postgres:16-alpine
    container_name: datascrapexter-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=datascrapexter
      - POSTGRES_USER=datascrapexter
      - POSTGRES_PASSWORD=changeme
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - datascrapexter-network
    profiles:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U datascrapexter"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: datascrapexter-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - datascrapexter-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: datascrapexter-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - datascrapexter-network
    profiles:
      - monitoring

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: datascrapexter-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./outputs:/usr/share/nginx/html/outputs:ro
    depends_on:
      - datascrapexter
    networks:
      - datascrapexter-network
    profiles:
      - proxy

networks:
  datascrapexter-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
