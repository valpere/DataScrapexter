# Comprehensive Error Recovery Configuration Examples

# Example 1: Basic Error Recovery with Circuit Breakers
name: "basic_error_recovery"
base_url: "https://unreliable-api.example.com"

# Enhanced error recovery configuration
error_recovery:
  enabled: true

  # Circuit breakers for different operations
  circuit_breakers:
    fetch_document:
      max_failures: 3                   # Open circuit after 3 consecutive failures
      reset_timeout: "30s"              # Try again after 30 seconds

    extract_field:
      max_failures: 5                   # More tolerant for field extraction
      reset_timeout: "60s"              # Longer recovery time

  # Fallback strategies
  fallbacks:
    fetch_document:
      strategy: "cached"                # Use cached content if available
      cache_timeout: "5m"               # Cache is valid for 5 minutes

    product_price:
      strategy: "default"               # Use default value if extraction fails
      default_value: 0.0

# Rate limiting with adaptive behavior
rate_limiter:
  base_interval: "2s"
  burst_size: 3
  strategy: 3                          # Hybrid strategy
  adaptation_threshold: "1s"
  error_rate_threshold: 0.15           # Adapt when >15% of requests fail
  consecutive_err_limit: 4
  min_change_threshold: 0.1

fields:
  - name: "product_name"
    selector: "h1.title"
    type: "text"
    required: true

  - name: "product_price"
    selector: ".price"
    type: "number"
    required: false

---

# Example 2: Advanced Error Recovery for E-commerce Scraping
name: "ecommerce_error_recovery"
base_url: "https://shop.example.com"

error_recovery:
  enabled: true

  circuit_breakers:
    fetch_document:
      max_failures: 2                   # Very sensitive to fetch failures
      reset_timeout: "2m"               # Long recovery time for stability

    extract_reviews:
      max_failures: 10                  # Reviews are optional, be tolerant
      reset_timeout: "5m"

  fallbacks:
    fetch_document:
      strategy: "alternative"           # Try alternative scraping method
      alternative: "mobile_version"     # Could be a mobile version of the site

    product_images:
      strategy: "cached"                # Use cached images if fetch fails
      cache_timeout: "1h"               # Images don't change often

    product_reviews:
      strategy: "degrade"               # Return degraded response
      degraded:
        message: "Reviews temporarily unavailable"
        count: 0
        average_rating: null

    product_availability:
      strategy: "default"
      default_value: false              # Assume out of stock if uncertain

# Comprehensive field extraction with recovery
fields:
  - name: "product_title"
    selector: "h1.product-name"
    type: "text"
    required: true

  - name: "price"
    selector: ".price-current"
    type: "number"
    transform:
      - type: "regex"
        pattern: "\\$([0-9,]+\\.?[0-9]*)"
        replacement: "$1"
      - type: "remove_commas"

  - name: "availability"
    selector: ".stock-status"
    type: "boolean"

  - name: "images"
    selector: ".product-gallery img"
    type: "list"
    attribute: "src"

  - name: "reviews"
    selector: ".review-item"
    type: "array"

# Browser automation with error recovery
browser:
  enabled: true
  headless: true
  timeout: "45s"
  wait_for_element: ".product-details"

# Proxy with health checks
proxy:
  enabled: true
  rotation: "round_robin"
  health_check: true
  providers:
    - name: "primary"
      type: "http"
      host: "proxy1.example.com"
      port: 8080
      enabled: true

---

# Example 3: News Scraping with Comprehensive Recovery
name: "news_scraping_recovery"
base_url: "https://news.example.com"

error_recovery:
  enabled: true

  circuit_breakers:
    fetch_document:
      max_failures: 1                   # Fail fast for news sites
      reset_timeout: "10s"              # Quick recovery

    extract_article_content:
      max_failures: 3
      reset_timeout: "30s"

  fallbacks:
    fetch_document:
      strategy: "cached"
      cache_timeout: "30m"              # News can be cached longer

    article_author:
      strategy: "default"
      default_value: "Unknown Author"

    article_publish_date:
      strategy: "default"
      default_value: "Unknown Date"

    article_tags:
      strategy: "degrade"
      degraded:
        tags: []
        message: "Tags unavailable"

# Fast rate limiting for news
rate_limiter:
  base_interval: "500ms"               # Fast scraping for news
  burst_size: 10
  strategy: 3
  max_interval: "10s"                  # Quick recovery
  adaptation_threshold: "500ms"
  error_rate_threshold: 0.05           # Very sensitive to errors
  consecutive_err_limit: 2
  min_change_threshold: 0.2

fields:
  - name: "headline"
    selector: "h1.article-title"
    type: "text"
    required: true

  - name: "content"
    selector: ".article-content"
    type: "text"
    required: true

  - name: "author"
    selector: ".article-author"
    type: "text"
    required: false

  - name: "publish_date"
    selector: ".publish-date"
    type: "text"
    required: false

  - name: "tags"
    selector: ".article-tags .tag"
    type: "list"
    required: false

---

# Example 4: API Scraping with Sophisticated Recovery
name: "api_scraping_recovery"
base_url: "https://api.data-provider.com"

error_recovery:
  enabled: true

  circuit_breakers:
    fetch_document:
      max_failures: 5                   # APIs can be more flaky
      reset_timeout: "5m"               # Longer recovery for rate-limited APIs

    parse_json_response:
      max_failures: 3
      reset_timeout: "1m"

  fallbacks:
    fetch_document:
      strategy: "cached"
      cache_timeout: "15m"              # API responses can be cached

    api_response:
      strategy: "degrade"
      degraded:
        status: "partial"
        data: {}
        message: "API temporarily unavailable"
        cached: true

# Conservative rate limiting for APIs
rate_limiter:
  base_interval: "5s"                  # Respect API rate limits
  burst_size: 2
  strategy: 1                          # Pure adaptive strategy
  max_interval: "300s"                 # 5 minute max backoff
  adaptation_threshold: "2s"
  error_rate_threshold: 0.1
  consecutive_err_limit: 3
  min_change_threshold: 0.15

# Custom headers for API authentication
headers:
  "Authorization": "Bearer ${API_TOKEN}"
  "User-Agent": "DataScrapexter/1.0 API Client"
  "Accept": "application/json"

fields:
  - name: "api_data"
    selector: "body"
    type: "json"
    required: true

---

# Example 5: Multi-site Scraping with Per-site Recovery
name: "multi_site_recovery"
base_url: "https://aggregator.example.com"

error_recovery:
  enabled: true

  # Different recovery strategies for different content types
  circuit_breakers:
    fetch_document:
      max_failures: 3
      reset_timeout: "1m"

    extract_product_info:
      max_failures: 2                   # Products are critical
      reset_timeout: "30s"

    extract_reviews:
      max_failures: 8                   # Reviews are optional
      reset_timeout: "10m"

    extract_images:
      max_failures: 5                   # Images are nice-to-have
      reset_timeout: "5m"

  fallbacks:
    fetch_document:
      strategy: "cached"
      cache_timeout: "10m"

    product_price:
      strategy: "default"
      default_value: "Price not available"

    product_images:
      strategy: "cached"
      cache_timeout: "1h"

    product_reviews:
      strategy: "degrade"
      degraded:
        review_count: 0
        average_rating: null
        reviews: []
        message: "Reviews temporarily unavailable"

    product_specifications:
      strategy: "alternative"
      alternative: "basic_specs_only"

# Balanced rate limiting
rate_limiter:
  base_interval: "1.5s"
  burst_size: 4
  strategy: 3                          # Hybrid strategy
  max_interval: "60s"
  adaptation_threshold: "1s"
  error_rate_threshold: 0.12
  consecutive_err_limit: 4
  min_change_threshold: 0.1

# Comprehensive field extraction
fields:
  - name: "product_name"
    selector: "h1.product-title"
    type: "text"
    required: true

  - name: "price"
    selector: ".price"
    type: "text"
    required: false

  - name: "images"
    selector: ".product-images img"
    type: "list"
    attribute: "src"
    required: false

  - name: "reviews"
    selector: ".review"
    type: "array"
    required: false

  - name: "specifications"
    selector: ".specs-table tr"
    type: "array"
    required: false

# Pagination with error recovery
pagination:
  enabled: true
  type: "next_button"
  next_selector: ".pagination .next"
  max_pages: 20
  delay_between_pages: "3s"
  continue_on_error: true