#!/bin/bash
# Pre-commit hook for DataScrapexter
# This script runs before each commit to ensure code quality

set -e

echo "Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}✓${NC} $2"
    else
        echo -e "${RED}✗${NC} $2"
        exit 1
    fi
}

# Check if we're in the right directory
if [ ! -f "go.mod" ]; then
    echo -e "${RED}Error: Not in DataScrapexter root directory${NC}"
    exit 1
fi

# 1. Run gofmt to check code formatting
echo "Checking code formatting..."
GOFMT_FILES=$(gofmt -l .)
if [ -n "$GOFMT_FILES" ]; then
    echo -e "${RED}The following files need formatting:${NC}"
    echo "$GOFMT_FILES"
    echo -e "${YELLOW}Run 'make fmt' to fix formatting${NC}"
    exit 1
fi
print_status 0 "Code formatting"

# 2. Run go vet for static analysis
echo "Running static analysis..."
go vet ./... > /dev/null 2>&1
print_status $? "Static analysis (go vet)"

# 3. Check for TODO/FIXME comments in staged files
echo "Checking for TODO/FIXME comments..."
STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$' || true)
if [ -n "$STAGED_GO_FILES" ]; then
    TODO_COUNT=$(echo "$STAGED_GO_FILES" | xargs grep -n "TODO\|FIXME" 2>/dev/null | wc -l || true)
    if [ "$TODO_COUNT" -gt 0 ]; then
        echo -e "${YELLOW}Warning: Found $TODO_COUNT TODO/FIXME comments in staged files${NC}"
        echo "$STAGED_GO_FILES" | xargs grep -n "TODO\|FIXME" 2>/dev/null || true
    fi
fi

# 4. Check that all .go files have license headers
echo "Checking license headers..."
MISSING_LICENSE=""
for file in $(find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*"); do
    if ! head -n 3 "$file" | grep -q "Copyright\|License\|MIT" 2>/dev/null; then
        MISSING_LICENSE="$MISSING_LICENSE$file\n"
    fi
done
if [ -n "$MISSING_LICENSE" ]; then
    echo -e "${YELLOW}Warning: The following files may be missing license headers:${NC}"
    echo -e "$MISSING_LICENSE"
fi

# 5. Run go mod tidy to ensure dependencies are clean
echo "Checking module dependencies..."
go mod tidy
if [ -n "$(git diff go.mod go.sum)" ]; then
    echo -e "${RED}go.mod or go.sum was modified by 'go mod tidy'${NC}"
    echo -e "${YELLOW}Please run 'go mod tidy' and stage the changes${NC}"
    exit 1
fi
print_status 0 "Module dependencies"

# 6. Build the project to catch compilation errors
echo "Building project..."
go build -o /tmp/datascrapexter-test ./cmd/datascrapexter > /dev/null 2>&1
BUILD_STATUS=$?
rm -f /tmp/datascrapexter-test
print_status $BUILD_STATUS "Project build"

# 7. Run tests if they exist
echo "Running tests..."
if [ -n "$(find . -name '*_test.go' -not -path "./vendor/*")" ]; then
    go test -short ./... > /dev/null 2>&1
    print_status $? "Unit tests"
else
    echo -e "${YELLOW}No tests found${NC}"
fi

# 8. Check for large files
echo "Checking for large files..."
LARGE_FILES=$(find . -type f -size +1M -not -path "./.git/*" -not -path "./vendor/*" -not -path "./bin/*" | head -5)
if [ -n "$LARGE_FILES" ]; then
    echo -e "${YELLOW}Warning: Large files detected (>1MB):${NC}"
    echo "$LARGE_FILES"
    echo -e "${YELLOW}Consider using Git LFS for binary files${NC}"
fi

# 9. Validate YAML example files if changed
echo "Checking YAML configurations..."
STAGED_YAML_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.yaml$\|\.yml$' || true)
if [ -n "$STAGED_YAML_FILES" ]; then
    for yaml_file in $STAGED_YAML_FILES; do
        if [ -f "$yaml_file" ]; then
            # Basic YAML validation using Python if available
            if command -v python3 &> /dev/null; then
                python3 -c "import yaml; yaml.safe_load(open('$yaml_file'))" 2>/dev/null
                if [ $? -ne 0 ]; then
                    echo -e "${RED}Invalid YAML in $yaml_file${NC}"
                    exit 1
                fi
            fi
        fi
    done
    print_status 0 "YAML validation"
fi

# 10. Check commit message format (if available)
if [ -f ".git/COMMIT_EDITMSG" ]; then
    COMMIT_MSG=$(cat .git/COMMIT_EDITMSG)
    # Simple check for conventional commit format
    if ! echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?:" ; then
        echo -e "${YELLOW}Warning: Commit message doesn't follow conventional format${NC}"
        echo -e "${YELLOW}Example: feat(scraper): add proxy rotation support${NC}"
    fi
fi

echo -e "${GREEN}All pre-commit checks passed!${NC}"
exit 0
